from __future__ import annotations

from config import Token
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from keyboards import *
from bot_text import *

bot = Bot(Token)
dp = Dispatcher(bot, storage=MemoryStorage())
storage = MemoryStorage()


def print_data(my_dict):
    economy_status = (parametrs[0] + str(my_dict["date"]) + '\n \n' + parametrs[1] + '\n' + parametrs[2] +
                      str(my_dict['population']) + '\n' + parametrs[3] + str(my_dict['pop_growth']) + '\n \n' +
                      parametrs[4] + '\n' + parametrs[5] + str(my_dict['sold']) + '\n' + parametrs[6] +
                      str(my_dict['ready_cons']) + '\n' + parametrs[7] + str(my_dict['cons']) + '\n' +
                      parametrs[8] + str(my_dict['cons_per']) + '\n' + parametrs[9] + str(my_dict['outfit']) +
                      '\n' + parametrs[10] + str(my_dict['outfit_cost']) + '\n \n' + parametrs[11] + '\n' +
                      parametrs[12] + str(my_dict['money']) + '\n' + parametrs[13] + str(my_dict['min_money']) + '\n' +
                      parametrs[14] + str(my_dict['money_cost']) + '\n' + parametrs[15] + str(my_dict['more_money'])
                      + '\n' + parametrs[16] + str(my_dict['fuel']) + '\n' + parametrs[17] +
                      str(my_dict['fuel_factory']) + '\n' + parametrs[18] + str(my_dict['fuel_produce']) + '\n' +
                      parametrs[19] + str(my_dict['fuel_cost']) + '\n' + parametrs[20] + str(my_dict['products']) +
                      '\n' + parametrs[21] + str(my_dict['products_factory']) + '\n' + parametrs[22] +
                      str(my_dict['products_produce']) + '\n' + parametrs[23] + str(my_dict['products_cost']))
    return economy_status


@dp.message_handler(commands='start', state='*')
async def start_handler(message: types.Message, state):
    await state.update_data(date=1,
                            population=100000, pop_growth=1.1,
                            sold=100, ready_cons=5, cons=20, cons_per=0.01, outfit=8000, outfit_cost=5,
                            money=10000, min_money=501250, money_cost=1, more_money=0, fuel=10000, fuel_factory=10,
                            fuel_produce=100000, fuel_cost=3, products=150000, products_factory=20,
                            products_produce=200000, products_cost=3,
                            Kafuron_f_fact=100, Kafuron_w=0, Kafuron_p_fact=100, Kafuron_m=100000, Klalkriya_f_fact=70,
                            Klalkriya_p_fact=60, Klalkriya_m=50000, Klalkriya_w=0, Keliktaniya_f_fact=20,
                            Keliktaniya_p_fact=10, Keliktaniya_m=10000, Keliktaniya_w=0, w=0, f=0, population_b=100000)
    with open('images/ancient_text.jpg', 'rb') as img:
        await message.answer_photo(img)
    await message.answer(introduction, reply_markup=info_button)
    with open('images/worldmap (1).jpg', 'rb') as img:
        await message.answer_photo(img)
    await state.set_state('1')


@dp.message_handler(state='1')
async def status(message, state):
    data = await state.get_data()
    await message.answer(print_data(data), reply_markup=choose_action)
    await state.set_state('–ú–µ–Ω—é')


@dp.message_handler(state='–ú–µ–Ω—é')
async def menu(message, state):
    if message.text == '–ú–µ—Ö–∞–Ω–∏–∫–∏‚öô':
        await state.set_state('–ú–µ—Ö–∞–Ω–∏–∫–∞')
        await mehanic(message, state)
    elif message.text == '–≠–∫–æ–Ω–æ–º–∏–∫–∞üíπ':
        await state.set_state('–≠–∫–æ–Ω–æ–º–∏–∫–∞')
        await economic(message, state)
    elif message.text == '–í–æ–π–Ω–∞‚öî':
        await state.set_state('–í–æ–π–Ω—ã')
        await war(message, state)
    elif message.text == '–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å‚è≠':
        data = await state.get_data()
        await state.update_data(date=data['date'] + 1)  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã
        data = await state.get_data()
        if data['date'] % 3 == 0:
            if data['outfit'] >= data['ready_cons']:
                await state.update_data(outfit=data['outfit'] - data['ready_cons'])
                data = await state.get_data()
                await state.update_data(sold=data['sold'] + data['ready_cons'])  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–ª–¥–∞—Ç + —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è
                data = await state.get_data()
                await state.update_data(ready_cons=0)
                data = await state.get_data()
            else:
                await state.update_data(sold=data['outfit'])
                data = await state.get_data()
                await state.update_data(ready_cons=data['ready_cons'] - data['outfit'])
                await state.update_data(outfit=0)
        if data['date'] % 7 == 0:
            await state.update_data(ready_cons=data['ready_cons'] + data['cons'])
            data = await state.get_data()
            await state.update_data(cons=0)
        await state.update_data(population_b=data['population'])
        data = await state.get_data()
        if data['date'] % 10 == 0:
            if ((data['cons'] + data['ready_cons'] + data['sold']) / data['population']) < data['cons_per']:
                await state.update_data(cons=data['cons'] + data['population'] * (
                        data['cons_per'] - (data['sold'] + data['ready_cons'] + data['cons']) / data['population']))
                data = await state.get_data()
            await state.update_data(population=(data['population'] * data['pop_growth']) - (data['population'] * (
                    data['cons_per'] - (data['sold'] + data['cons'] + data['ready_cons']) / data['population'])))
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–∏—Ä–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è
        data = await state.get_data()
        await state.update_data(money_cost=data['min_money'] / (data['money'] + data['more_money']))
        data = await state.get_data()
        await state.update_data(money=data['money'] + (data['population'] * ((1 / data['money_cost']) / 20)) - (
            # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–Ω–µ–≥
                data['sold'] + data['cons'] + data['ready_cons']) * (4 / data['money_cost']))
        data = await state.get_data()
        await state.update_data(
            products_produce=data['products_factory'] * 10000 - (data['sold'] + data['cons'] +  # –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
                                                                 data['ready_cons']) - 2 * data['population'])
        data = await state.get_data()
        await state.update_data(products=data['products'] + data['products_produce'])  # –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        data = await state.get_data()
        data = await state.get_data()
        await state.update_data(
            fuel_produce=data['fuel_factory'] * 10000 - 4 * (data['sold'] + data['cons'] +  # –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –Ω–µ—Ñ—Ç–∏
                                                             data['ready_cons']) - data['population'])
        data = await state.get_data()
        await state.update_data(fuel=data['fuel'] + data['fuel_produce'])  # –Ω–µ—Ñ—Ç—å –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö
        data = await state.get_data()
        if data['fuel_produce'] < 0:
            if data['fuel'] / data['fuel_produce'] >= 60:
                data = await state.get_data()
                await state.update_data(fuel_cost=5 / data['money_cost'])
            else:
                data = await state.get_data()
                await state.update_data(fuel_cost=6 / data['money_cost'])
        elif data['fuel_produce'] == 0:
            data = await state.get_data()
            await state.update_data(fuel_cost=4 / data['self.money_cost'])
        else:
            if (data['fuel_produce'] / (
                    2 * (data['sold'] + data['cons'] + data['ready_cons']) + 1 * data['population'])) >= 2:
                data = await state.get_data()
                await state.update_data(fuel_cost=2 / data['money_cost'])
            else:
                data = await state.get_data()
                await state.update_data(fuel_cost=3 / data['money_cost'])  # –∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–ø–ª–∏–≤–∞
        if data['products_produce'] < 0:
            if data['products'] / data['products_produce'] >= 60:
                data = await state.get_data()
                await state.update_data(products_cost=4 / data['money_cost'])
            else:
                data = await state.get_data()
                await state.update_data(products_cost=3 / data['money_cost'])
        elif data['products_produce'] == 0:
            data = await state.get_data()
            await state.update_data(products_cost=2 / data['self.money_cost'])
        else:
            if (data['products_produce'] / (
                    data['sold'] + data['cons'] + data['ready_cons'] + 2 * data['population'])) >= 2:
                data = await state.get_data()
                await state.update_data(products_cost=1 / data['money_cost'])
            else:
                data = await state.get_data()
                await state.update_data(products_cost=2 / data['money_cost'])  # –∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        data = await state.get_data()
        await state.update_data(
            pop_growth=1.1 + data['money_cost'] * 0.01 - (data['fuel_cost'] + data['products_cost']) * 0.01)
        data = await state.get_data()
        data = await state.get_data()
        await state.set_state('1')
        data = await state.get_data()
        await state.update_data(min_money=(data['population'] * 5 / data['money_cost']) + (10 / data['money_cost']) * (
                    data['sold'] + data['cons'] + data['ready_cons']))
        await status(message, state)
        data = await state.get_data()
        await state.update_data(Kafuron_f_fact=data['Kafuron_f_fact'] + 0.1)
        data = await state.get_data()
        await state.update_data(Kafuron_p_fact=data['Kafuron_p_fact'] + 0.1)
        data = await state.get_data()
        await state.update_data(Kafuron_m=data['Kafuron_m'] + 20)
        data = await state.get_data()
        await state.update_data(Klalkriya_f_fact=data['Klalkriya_f_fact'] + 0.1)
        data = await state.get_data()
        await state.update_data(Klalkriya_p_fact=data['Klalkriya_p_fact'] + 0.1)
        data = await state.get_data()
        await state.update_data(Klalkriya_m=data['Klalkriya_m'] + 10)
        data = await state.get_data()
        await state.update_data(Keliktaniya_f_fact=data['Keliktaniya_f_fact'] + 0.1)
        data = await state.get_data()
        await state.update_data(Keliktaniya_p_fact=data['Keliktaniya_p_fact'] + 0.1)
        data = await state.get_data()
        await state.update_data(Keliktaniya_m=data['Keliktaniya_m'] + 3)
        if data['products'] <= 0:
            await message.answer('–í–∞—à–∏ –ø–æ–¥–¥–∞–Ω–Ω—ã–µ —É–º–µ—Ä–ª–∏ –æ—Ç –≥–æ–ª–æ–¥–∞, –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–æ–∑—Ä–æ–¥–∏—Ç—å –∏–º–ø–µ—Ä–∏—é',
                                 reply_markup=ReplyKeyboardRemove())
        if data['fuel'] <= 0:
            await message.answer('–í–∞—à–∞ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç—å —Ä—É—Ö–Ω—É–ª–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ—Ö–≤–∞—Ç–∫–∏ —Ç–æ–ø–ª–∏–≤–∞, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏',
                                 reply_markup=ReplyKeyboardRemove())
        if data['money'] <= 0:
            await message.answer('–í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏–∫–∞ –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–ª–∞ —Ç–∞–∫–æ–π —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.',
                                 reply_markup=ReplyKeyboardRemove())
        if data['Kafuron_w'] == data['Kafuron_w'] == data['Kafuron_w'] == 2:
            await message.answer('–í—ã —Å–º–æ–≥–ª–∏ –ø—Ä–æ–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –∫ —Å–µ–±–µ –≤—Å–µ –∑–µ–º–ª–∏ –∏–º–ø–µ—Ä–∏–∏. –ü–û–ë–ï–î–ê!!!',
                                 reply_markup=ReplyKeyboardRemove())

    elif message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–∫–æ–Ω–æ–º–∏–∫–µ‚Ñπ':
        data = await state.get_data()
        await message.answer(print_data(data), reply_markup=choose_action)
        await state.set_state('–ú–µ–Ω—é')


@dp.message_handler(state='–≠–∫–æ–Ω–æ–º–∏–∫–∞')
async def economic(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–æ –≤–∫–ª–∞–¥–∫–µ —ç–∫–æ–Ω–æ–º–∏–∫–∞', reply_markup=choose_politic)
    await state.set_state('–í—ã–±–æ—Ä_—ç–∫–æ–Ω–æ–º–∏–∫–∏')


@dp.message_handler(state='–í—ã–±–æ—Ä_—ç–∫–æ–Ω–æ–º–∏–∫–∏')
async def chose_politic(message: types.Message, state: FSMContext):
    if message.text == '–†–µ—Å—É—Ä—Å—ã‚õè':
        await message.answer(
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–≤–æ–¥—ã –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É —Ä–µ—Å—É—Ä—Å–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –≤–∞–º –¥–ª—è –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π –∏ –∞—Ä–º–∏–∏',
            reply_markup=choose_factory)
        await state.set_state('–í—ã–±–æ—Ä –∑–∞–≤–æ–¥–∞')
    elif message.text == '–ü–µ—á–∞—Ç—å –¥–µ–Ω–µ–≥ü™ô':
        await state.set_state('–ü–µ—á–∞—Ç—å –¥–µ–Ω–µ–≥')
        await message.answer('–≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å', reply_markup=ReplyKeyboardRemove())
    if message.text == '–ê—Ä–º–∏—èüõ°':
        await message.answer(
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–µ–≥–æ –ø—Ä–∏–∑—ã–≤–∞ –∏ –∑–∞–∫—É–ø–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∞—Ä–º–∏–∏',
            reply_markup=choose_army)
        await state.set_state('–í—ã–±–æ—Ä –≤–æ–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏')
    elif message.text == '–ù–∞–∑–∞–¥üîô':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É', reply_markup=choose_action)
        await state.set_state('–ú–µ–Ω—é')


@dp.message_handler(state='–í—ã–±–æ—Ä –∑–∞–≤–æ–¥–∞')
async def Factory(message: types.Message, state: FSMContext):
    if message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞–∂–¥–∞–Ωc–∫–∏–µ —Ñ–∞–±—Ä–∏–∫–∏üõ†':
        await state.set_state('–¢–ù–ü')
        await message.answer(
            '–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ª—å–∫–æ —Ñ–∞–±—Ä–∏–∫, —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å. –¶–µ–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∏ - 5000 (–§–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–æ—è—Ç—Å—è –º–Ω–≥–Ω–æ–≤–µ–Ω–Ω–æ)',
            reply_markup=ReplyKeyboardRemove())
    elif message.text == '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –Ω–µ—Ñ—Ç–µ–±–∞–∑—É‚öí':
        await state.set_state('–¢–§')
        await message.answer(
            '–≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–ª—å–∫–æ —Ñ–∞–±—Ä–∏–∫, —Å–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å. –¶–µ–Ω–∞ —Ñ–∞–±—Ä–∏–∫–∏ : 10000 (–§–∞–±—Ä–∏–∫–∏ —Å—Ç—Ä–æ—è—Ç—Å—è –º–Ω–≥–Ω–æ–≤–µ–Ω–Ω–æ)',
            reply_markup=ReplyKeyboardRemove())
    elif message.text == '–ù–∞–∑–∞–¥üîô':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É', reply_markup=choose_politic)
        await state.set_state('–í—ã–±–æ—Ä_—ç–∫–æ–Ω–æ–º–∏–∫–∏')


@dp.message_handler(state='–í—ã–±–æ—Ä –≤–æ–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏')
async def Factory(message: types.Message, state: FSMContext):
    if message.text == '–∑–∞–∫—É–ø–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µüß∞':
        await state.set_state('—Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')
        await message.answer(
            '–≤–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—É–ø–∏—Ç—å',
            reply_markup=ReplyKeyboardRemove())
    elif message.text == '–í—ã–±—Ä–∞—Ç—å –ø—Ä–∏–∑—ã–≤ü´°':
        await state.set_state('–ø—Ä–∏–∑—ã–≤')
        await message.answer('–≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–∑—ã–≤–∞', reply_markup=call)
    elif message.text == '–ù–∞–∑–∞–¥üîô':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É', reply_markup=choose_politic)
        await state.set_state('–í—ã–±–æ—Ä_—ç–∫–æ–Ω–æ–º–∏–∫–∏')


@dp.message_handler(state='–ü–µ—á–∞—Ç—å –¥–µ–Ω–µ–≥')
async def print_money(message, state):
    data = await state.get_data()
    await state.update_data(money=data['money'] + int(message.text))
    data = await state.get_data()
    await state.update_data(more_money=int(message.text) + data['more_money'])
    data = await state.get_data()
    await state.update_data(money_cost=data['min_money'] / (data['money'] + data['more_money']))
    data = await state.get_data()
    await state.set_state('–≠–∫–æ–Ω–æ–º–∏–∫–∞')
    await economic(message, state)


@dp.message_handler(state='–¢–ù–ü')
async def build_TNP(message, state):
    data = await state.get_data()
    await state.update_data(products_factory=int(message.text) + data['products_factory'])
    data = await state.get_data()
    await state.update_data(money=data['money'] - 10000 * int(message.text))
    await state.set_state('–¢–ù–ü')
    await economic(message, state)


@dp.message_handler(state='–¢–§')
async def build_FF(message, state):
    data = await state.get_data()
    await state.update_data(fuel_factory=int(message.text) + data['fuel_factory'])
    data = await state.get_data()
    await state.update_data(money=data['money'] - 30000 * int(message.text))
    await state.set_state('–¢–§')
    await economic(message, state)


@dp.message_handler(state='—Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')
async def buy_outfit(message, state):
    data = await state.get_data()
    if int(message.text) * data['outfit_cost'] / data['money_cost'] >= data['money']:
        await state.update_data(money=data['money'] - (data['outfit_cost'] / data['money_cost']) * (
                data['money'] // (data['outfit_cost'] / data['money_cost'])))
        data = await state.get_data()
        await state.update_data(outfit=data['outfit'] + data['money'] // (data['outfit_cost'] / data['money_cost']))
    else:
        await state.update_data(money=data['money'] - int(message.text) * (data['outfit_cost'] / data['money_cost']))
        data = await state.get_data()
        await state.update_data(outfit=data['outfit'] + int(message.text))
    await state.set_state('—Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ')
    await economic(message, state)


@dp.message_handler(state='–ø—Ä–∏–∑—ã–≤')
async def another_outfit(message, state):
    data = await state.get_data()
    if message.text == '–ù–∞–∑–∞–¥üîô':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É', reply_markup=choose_army)
        await state.set_state('–í—ã–±–æ—Ä_—ç–∫–æ–Ω–æ–º–∏–∫–∏')
    elif message.text == '1%üòÄ':
        await state.update_data(cons_per=0.01)
    elif message.text == '2.5%üôÇ':
        await state.update_data(cons_per=0.025)
    elif message.text == '5%üòê':
        await state.update_data(cons_per=0.05)
    elif message.text == '10%ü•≤':
        await state.update_data(cons_per=0.1)
    elif message.text == '25%üò¨':
        await state.update_data(cons_per=0.25)
    await state.set_state('–ø—Ä–∏–∑—ã–≤')
    await economic(message, state)


@dp.message_handler(state='–í–æ–π–Ω—ã')
async def war(message: types.Message, state: FSMContext):
    await message.answer('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤–æ –≤–∫–ª–∞–¥–∫–µ –≤–æ–π–Ω–∞', reply_markup=choose_war)
    await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')


@dp.message_handler(state='–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
async def war_c(message: types.Message, state: FSMContext):
    if message.text == '–ó–∞—Ö–≤–∞—Ç–∏—Ç—å Keliktaniya':
        data = await state.get_data()
        if data['w'] == 0 and data['Keliktaniya_w'] == 0:
            await state.update_data(Keliktaniya_w=1)
            await state.update_data(w=1)
            if data['sold'] * 1.5 >= data['Keliktaniya_m']:
                data = await state.get_data()
                await state.update_data(w=0)
                await state.update_data(Keliktaniya_w=2)
                await message.answer('–í—ã –∑–∞–≤–æ–µ–≤–∞–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ Keliktaniya', reply_markup=choose_war)
                data = await state.get_data()
                await state.update_data(sold=data['sold'] - data['Keliktaniya_m'] * 1.2)
                await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
            else:
                data = await state.get_data()
                await state.update_data(f=1)
                await message.answer('–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ Keliktaniya –∑–∞–≤–æ–µ–≤–∞–ª–æ –≤–∞—Å, –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–æ–∑—Ä–æ–¥–∏—Ç—å –∏–º–ø–µ—Ä–∏—é',
                                     reply_markup=ReplyKeyboardRemove())
                await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
        elif data['Keliktaniya_w'] == 2:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ —ç—Ç–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', reply_markup=choose_war)
        else:
            await message.answer('–í—ã —É–∂–µ –≤–µ–¥—ë—Ç–µ –≤–æ–π–Ω—É!', reply_markup=choose_war)
            await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
    elif message.text == '–ó–∞—Ö–≤–∞—Ç–∏—Ç—å Kafuron':
        data = await state.get_data()
        if data['w'] == 0 and data['Kafuron_w'] == 0:
            await state.update_data(Kafuron_w=1)
            await state.update_data(w=1)
            if data['sold'] * 1.5 >= data['Kafuron_m']:
                data = await state.get_data()
                await state.update_data(w=0)
                await state.update_data(Kafuron_w=2)
                await message.answer('–í—ã –∑–∞–≤–æ–µ–≤–∞–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ Kafuron', reply_markup=choose_war)
                data = await state.get_data()
                await state.update_data(sold=data['sold'] - data['Kafuron_m'] * 1.2)
                await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
            else:
                data = await state.get_data()
                await state.update_data(f=1)
                await message.answer('–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ Kafuron –∑–∞–≤–æ–µ–≤–∞–ª–æ –≤–∞—Å, –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–æ–∑—Ä–æ–¥–∏—Ç—å –∏–º–ø–µ—Ä–∏—é',
                                     reply_markup=ReplyKeyboardRemove())
                await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
        elif data['Kafuron_w'] == 2:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ —ç—Ç–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', reply_markup=choose_war)
        else:
            await message.answer('–í—ã —É–∂–µ –≤–µ–¥—ë—Ç–µ –≤–æ–π–Ω—É!', reply_markup=choose_war)
            await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
    elif message.text == '–ó–∞—Ö–≤–∞—Ç–∏—Ç—å Klalkriya':
        data = await state.get_data()
        if data['w'] == 0 and data['Klalkriya_w'] == 0:
            await state.update_data(Klalkriya_w=1)
            await state.update_data(w=1)
            if data['sold'] * 1.5 >= data['Klalkriya_m']:
                data = await state.get_data()
                await state.update_data(w=0)
                await state.update_data(Klalkriya_w=2)
                await state.update_data(products_factory=data['products_factory'] + data['Klalkriya_p_fact'] // 2)
                data = await state.get_data()
                await state.update_data(fuel_factory=data['fuel_factory'] + data['Klalkriya_f_fact'] // 2)
                await message.answer('–í—ã –∑–∞–≤–æ–µ–≤–∞–ª–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ Klalkriya', reply_markup=choose_war)
                data = await state.get_data()
                await state.update_data(sold=data['sold'] - data['Klalkriya_m'] * 1.2)
                await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
            else:
                data = await state.get_data()
                await state.update_data(f=1)
                await message.answer('–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ Klalkriya –∑–∞–≤–æ–µ–≤–∞–ª–æ –≤–∞—Å, –≤—ã –Ω–µ —Å–º–æ–≥–ª–∏ –≤–æ–∑—Ä–æ–¥–∏—Ç—å –∏–º–ø–µ—Ä–∏—é',
                                     reply_markup=ReplyKeyboardRemove())
                await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
        elif data['Klalkriya_w'] == 2:
            await message.answer('–í—ã —É–∂–µ –∑–∞—Ö–≤–∞—Ç–∏–ª–∏ —ç—Ç–æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ', reply_markup=choose_war)
        else:
            await message.answer('–í—ã —É–∂–µ –≤–µ–¥—ë—Ç–µ –≤–æ–π–Ω—É!', reply_markup=choose_war)
            await state.set_state('–û–±—ä—è–≤–∏—Ç—å –≤–æ–π–Ω—É')
    elif message.text == '–ù–∞–∑–∞–¥üîô':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É', reply_markup=choose_action)
        await state.set_state('–ú–µ–Ω—é')


@dp.message_handler(state='–ú–µ—Ö–∞–Ω–∏–∫–∞')
async def mehanic(message: types.Message, state: FSMContext):
    await message.answer(mehanics, reply_markup=before)
    if message.text == '–ù–∞–∑–∞–¥üîô':
        await message.answer('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–∫–ª–∞–¥–∫—É', reply_markup=choose_action)
        await state.set_state('–ú–µ–Ω—é')


executor.start_polling(dp, skip_updates=True)
